# =========================
#  News ETL - Config
# =========================

io:
  # INPUT: lo genera el paso "news_client" del workflow
  input_ndjson: data/news_raw.ndjson

  # OUTPUTS locales (se suben luego a Azure Blob)
  output_ndjson: data/news_{{date}}.ndjson
  output_preview_csv: data/news_preview_{{date}}.csv
  heartbeat_file: data/heartbeat.txt

runtime:
  log_level: INFO

  # Límite SOLO para tickers del scope. 0 = sin límite
  limit_per_ticker_per_day: 3
  limit_ticker_scope: ["AMZN", "MSFT", "GOOGL"]
  newest_first: true  # tomar las más nuevas primero para cumplir el cupo

filters:
  # Lista blanca de fuentes (vacía = permitir todas)
  allowed_sources_whitelist: []

  # Bloqueo por dominio o "source"
  source_blacklist:
    - "gossipcop.com"
    - "thegatewaypundit.com"
    - "pagesix.com"
    - "radaronline.com"
    - "freerepublic.com"
    - "brobible.com"
    - "matometanews.com"

  # Regex (case-insensitive) para excluir por título o URL
  exclude_phrases:
    - "(?:giveaway|coupon|promo code|discount|deal of the day)"
    - "(?:horoscope|zodiac)"
    - "(?:celebrity|gossip|rumor)"

registry_domains_blacklist:
  - "biztoc.com"       # agregadores que duplican
  - "slashdot.org"     # firehose muchas veces no es contenido original
  - "news.ycombinator.com"

# Filtro “commerce” (suaviza ruido de shopping salvo dominios técnicos/empresariales)
commerce_filter:
  enabled: true
  allowed_corporate_domains:
    - "microsoft.com"
    - "blogs.microsoft.com"
    - "developer.microsoft.com"
    - "aboutamazon.com"
    - "amazon.com"
    - "aws.amazon.com"
    - "googleblog.com"
    - "blog.google"
    - "google.com"
  title_url_terms:
    - "(?:save|% off|deal|sale|lowest price|clearance)"
    - "(?:best.*(headphones|tv|laptop|phone))"
  path_terms:
    - "/deals?/|/shopping/|/coupons?/|/promo/"
  price_percent_rules:
    price_regex: "(?:\\$\\s?\\d{1,4}(?:[\\.,]\\d{2})?)"
    percent_regex: "(?:\\d{1,3}\\s?%)"
    min_price_tokens: 2
    min_percent_tokens: 2

# Azure AI Language
azure_language:
  endpoint: "${AZURE_LANGUAGE_ENDPOINT}"  # p.ej. https://<tu-rg>.cognitiveservices.azure.com
  key: "${AZURE_LANGUAGE_KEY}"            # viene del secret
  api_version: "2023-04-01"
  timeout_seconds: 30
  batch_size: 5
  # Si quieres forzar idioma (en -> inglés) para tareas que lo requieren:
  force_language: "en"
  tasks:
    language_detection: true
    sentiment_analysis: true
    key_phrase_extraction: true
    entity_recognition: true
    entity_linking: true

# Reglas de taggeo por ticker (basadas en entidades devueltas + texto)
ticker_tagging:
  enabled: true
  tickers:
    AMZN:
      - "(?i)\\bamazon\\b"
      - "(?i)\\bprime video\\b"
      - "(?i)\\baws\\b"
      - "(?i)\\balexa\\+?\\b"
      - "(?i)\\bring(?:\\.com)?\\b"
      - "(?i)\\bkindle\\b"
      # entidades típicas devueltas por Azure
      - "(?i)^amazon(?:\\.com)?$"
      - "(?i)^amazon web services$"
      - "(?i)^aws$"
      - "(?i)^prime video$"

    MSFT:
      - "(?i)\\bmicrosoft\\b"
      - "(?i)\\bxbox\\b"
      - "(?i)\\bazure\\b"
      - "(?i)\\bwindows\\b"
      - "(?i)\\boffice 365\\b|\\bmicrosoft 365\\b"
      - "(?i)\\bgitHub\\b"
      # entidades
      - "(?i)^microsoft$"
      - "(?i)^xbox$"
      - "(?i)^azure$"
      - "(?i)^windows$"
      - "(?i)^microsoft 365$"

    GOOGL:
      - "(?i)\\bgoogle\\b"
      - "(?i)\\balphabet\\b"
      - "(?i)\\byoutube\\b"
      - "(?i)\\bdeepmind\\b"
      - "(?i)\\bwaymo\\b"
      - "(?i)\\bgemini\\b"
      - "(?i)\\bandroid\\b"
      # entidades
      - "(?i)^google$"
      - "(?i)^alphabet inc\\.?$"
      - "(?i)^youtube$"
      - "(?i)^deepmind$"
      - "(?i)^waymo$"

# Subida a Azure Blob por connection string (via secret AZURE_STORAGE_CONNECTION_STRING)
azure_blob:
  enabled: true
  container: "datasets"
  prefix: "news"
  content_types:
    ".csv": "text/csv; charset=utf-8"
    ".ndjson": "application/x-ndjson; charset=utf-8"
    ".txt": "text/plain; charset=utf-8"
